# 과제 1
# 자바 스타일로 코딩(모든 것을 객체화하라)
# 실행 스크립트 빼고
# def main():
#   game = Game()
#   game.start()
#
# main()
# 클래스는 별도의 파일로 생성해서 호출하라
#
# 과제 2
# 전역변수 안 쓰기
#
# class를 이용해서 lol simulation을 만들어보자
#
# 1. requests를 사용해 champion정보를 가져온다.
#     1. http://ddragon.leagueoflegends.com/cdn/11.17.1/data/ko_KR/champion.json
# 2. red, blue팀에 랜덤으로 다섯개 챔피언을 생성한다(중복 허용 안됨)
# 3. 게임을 시작한다.
# 4. 챔피언은 상대팀의 다른 챔피언을 공격할 수 있고, hp가 0 이하로 떨어지면 사망처리되며, 사망처리되면 더이상 공격을 할 수 없다.
# 5. 게임이 시작되면 스피드가 높은 챔피언부터 순서대로 공격을 하며, 각 챔피언의 데미지는 챔피언의 타입에 따라 (attack * attackdamage) 혹은 (magic * attackdamage)가 될 수 있다(분류기준은 자유), 각 action을 print하자(ex: Azir가 Brand에게 123의 데미지를 주었다. Brand는 사망했다!)
# 6. 한 팀의 챔피언이 모두 사망할때까지 반복한다.
# 7. 게임이 종료되면 이긴 팀을 출력하자.
# 8. 완성된 코드는 github에 업로드할 것.

import requests
import json
import random

class Game:


    def __init__(self):
        # requests, json으로 챔피언 정보 갖고 오기
        champion_info = json.loads(requests.get("http://ddragon.leagueoflegends.com/cdn/11.17.1/data/ko_KR/champion.json").text)["data"]
        # 무작위로 챔피언 10개 생성 및 5개씩 redteam, blueteam 생성
        data = random.sample(list(champion_info), 10)
        self.redteam = Team(data[0:5])
        self.blueteam = Team(data[5:10])

#게임 스따또!
    def gamestart(self):
        red = self.redteam.get_list()
        blue = self.blueteam.get_list()
        print(red, blue)
        while not self.redteam.all_death() or self.blueteam.all_death():
            for champ in self._attack_order() :
                if champ in self.redteam.get_list():
                    foe = random.choice(self.blueteam.get_list())
                    Champion(foe).set_minus_hp(Champion(champ).doattack(foe))

                else:
                    foe = random.choice(self.redteam.get_list())
                    Champion(foe).set_minus_hp(Champion(champ).doattack(foe))


#공격 순서 정하기
    def _attack_order(self):
        all_champion = self.redteam.get_list() + self.blueteam.get_list()
        champion_and_speed = []
        attack_order = []
        for champion in all_champion:
            champion_and_speed.append([champion, Champion(champion).get_movespeed()])
        sorted(champion_and_speed, key=lambda x: x[1], reverse=True)
#       sorted(champion_and_speed, key=lambda x: -x[1])
        i = 0
        while i < len(champion_and_speed):
            attack_order.append(champion_and_speed[i][0])
            i += 1

        return attack_order

class Team:
    def __init__(self, champions):
        self.team = []
        for champion in champions:
            self.team.append(Champion(champion).champion)

    def get_list(self):
        return self.team

    def all_death(self):
        for champion in self.team:
            if Champion(champion).get_hp() > 0:
                return False

            return True

class Champion:
    champion_info = json.loads(requests.get("http://ddragon.leagueoflegends.com/cdn/11.17.1/data/ko_KR/champion.json").text)["data"]

    def __init__(self, champion):
        self.champion = champion
        self.movespeed = self.champion_info[champion]["stats"]["movespeed"]
        self.hp = self.champion_info[champion]["stats"]["hp"]
        self.attack = self.champion_info[champion]["info"]["attack"]
        self.magic = self.champion_info[champion]["info"]["magic"]
        self.dead = False
        if self.attack > self.magic:
            self.damage = self.champion_info[champion]["stats"]["attackdamage"] + self.attack
        else:
            self.damage = self.champion_info[champion]["stats"]["attackdamage"] + self.magic

    def doattack(self, foe):
        print("{}이 {}를 {}만큼 공격하였습니다.".format(self.champion, foe, self.damage))
        return self.damage

    def set_minus_hp(self, damage):
        self.hp -= damage

    def get_name(self):
        return self.champion

    def get_hp(self):
        return self.hp

    def get_movespeed(self):
        return self.movespeed

    def is_dead(self):
        pass

game = Game()
game.gamestart()




